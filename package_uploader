#!/usr/bin/env bash

_program()
{
    core_usesIn curl
    core_usesIn jsonwriter
    core_usesIn jsonreader

    package_uploader()
    {
        echo "Uploading $package_uploader_package_file to $package_uploader_server."
        package_uploader_upload "$package_uploader_package_file"
    }

    package_uploader_upload()
    {
        local packageFile=$1
        local curl_httpStatusCode
        local TMP_FILE
        local responseFile
        local curl_uploadFile=$packageFile
        local url
        local repository="${packageFile##*.}"

        core_temporaryFiles_newFileToRemoveOnExit
        responseFile=$TMP_FILE
        url="$package_uploader_server/users/$package_uploader_username/repositories/$repository/packages?distribution=$package_uploader_distribution&component=$package_uploader_component"

        curl -i -o $responseFile -X POST --header "Authorization:Bearer $package_uploader_api_key" -F file=@$packageFile $url
        echo "Request finished."
        cat $responseFile
        grep "HTTP/1.1 200 OK" $responseFile || { echo "Error status from server"; exit 1; }
    }

}

_program_name='package_uploader'
_program_version='unversioned'
_program_package_or_build=''
_program_path="$([ "${_program_fattening_program_path+set}" = 'set' ] && printf '%s\n' "$_program_fattening_program_path" || ([ "${0%/*}" = "${0}" ] && printf '%s\n' '.' || printf '%s\n' "${0%/*}"))"
_program_libPath="${_program_path}/lib"
_program_etcPath="${_program_path}/etc"
_program_varPath="${_program_path}/var"
_program_entrypoint='package_uploader'


_program_commandLine_parseInitialise()
{
    core_variable_isSet WERCKER_RELEASEQUEUE_DEPLOY_SERVER && package_uploader_server=$WERCKER_RELEASEQUEUE_DEPLOY_SERVER
    core_variable_isSet WERCKER_RELEASEQUEUE_DEPLOY_DISTRIBUTION && package_uploader_distribution=$WERCKER_RELEASEQUEUE_DEPLOY_DISTRIBUTION
    core_variable_isSet WERCKER_RELEASEQUEUE_DEPLOY_USERNAME && package_uploader_username=$WERCKER_RELEASEQUEUE_DEPLOY_USERNAME
    core_variable_isSet WERCKER_RELEASEQUEUE_DEPLOY_APIKEY && package_uploader_api_key=$WERCKER_RELEASEQUEUE_DEPLOY_APIKEY
    core_variable_isSet WERCKER_RELEASEQUEUE_DEPLOY_COMPONENT && package_uploader_component=$WERCKER_RELEASEQUEUE_DEPLOY_COMPONENT
    core_variable_isSet WERCKER_RELEASEQUEUE_DEPLOY_PACKAGE && package_uploader_package_file=$WERCKER_RELEASEQUEUE_DEPLOY_PACKAGE
    true
}

_program_commandLine_helpMessage()
{
    _program_commandLine_helpMessage_usage="[OPTION]... -- [PACKAGE FILE]..."
    _program_commandLine_helpMessage_description="Uploads package to ReleaseQueue"
    _program_commandLine_helpMessage_options="
    --server URL            Server URL.
    --distribution dist     Package distribution
    --component comp        Package component
    --username              ReleaseQueue username
    --api-key apikey        ReleaseQueue api key
    package                 Package to upload
    "
    _program_commandLine_helpMessage_optionsSpacing='     '
    _program_commandLine_helpMessage_configurationKeys="
"
    _program_commandLine_helpMessage_examples="
    ${_program_name} --server 127.0.0.1:4000 --distribution trusty --component extras --username admin --api-key apikey package.deb
    Or set the options as env variables before calling
    WERCKER_RELEASEQUEUE_DEPLOY_SERVER=http://127.0.0.1:4001 WERCKER_RELEASEQUEUE_DEPLOY_DISTRIBUTION=dist WERCKER_RELEASEQUEUE_DEPLOY_USERNAME=username WERCKER_RELEASEQUEUE_DEPLOY_API_KEY=apikey WERCKER_RELEASEQUEUE_DEPLOY_COMPONENT=comp WERCKER_RELEASEQUEUE_DEPLOY_PACKAGE=package_file.deb ${_program_name}
"
}

_program_commandLine_optionExists()
{
  case "$optionName" in

    server)
        echo 'yes-argumented'
    ;;

    distribution)
        echo 'yes-argumented'
    ;;

    username)
        echo 'yes-argumented'
    ;;

    api-key)
        echo 'yes-argumented'
    ;;

    component)
        echo 'yes-argumented'
    ;;

    *)
        echo 'no'
    ;;

  esac
}


_program_commandLine_processOptionWithArgument()
{
    case "$optionName" in

        server)
            package_uploader_server="$optionValue"
        ;;

        distribution)
            package_uploader_distribution="$optionValue"
        ;;

        username)
            package_uploader_username="$optionValue"
        ;;

        api-key)
            package_uploader_api_key="$optionValue"
        ;;

        password)
            package_uploader_password="$optionValue"
        ;;

        component)
            package_uploader_component="$optionValue"
        ;;

        *)
            echo 'no'
        ;;

    esac
}


_program_commandLine_handleNonOptions()
{
    if core_variable_matches $# 1; then
        package_uploader_package_file=$1
    fi
    true
}


_program_commandLine_validate()
{
    core_variable_isUnsetOrEmpty "package_uploader_server" && core_exitError $core_commandLine_exitCode_USAGE "Server option is mandatory"

    core_variable_isUnsetOrEmpty "package_uploader_distribution" && core_exitError $core_commandLine_exitCode_USAGE "Distribution option is mandatory"

    core_variable_isUnsetOrEmpty "package_uploader_component" && core_exitError $core_commandLine_exitCode_USAGE "Component option is mandatory"

    core_variable_isUnsetOrEmpty "package_uploader_username" && core_exitError $core_commandLine_exitCode_USAGE "Username option is mandatory"

    core_variable_isUnsetOrEmpty "package_uploader_api_key" && core_exitError $core_commandLine_exitCode_USAGE "Api key option is mandatory"

    core_variable_isUnsetOrEmpty "package_uploader_package_file" && core_exitError $core_commandLine_exitCode_USAGE "Specify package"

    core_validate_filePathReadable $core_commandLine_exitCode_USAGE 'option' 'package path' "$package_uploader_package_file"

    true
}


# Assumes pwd, and so requires this code to be running from this folder
. "$_program_libPath"/shellfire/core/init.functions "$@"
