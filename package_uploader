#!/usr/bin/env bash

_program()
{
    core_usesIn curl
    core_usesIn jsonwriter
    core_usesIn jsonreader

    package_uploader()
    {
        echo "Uploading package_uploader_packageFile to $package_uploader_server"
        package_uploader_getToken
        package_uploader_upload "$package_uploader_packageFile"
    }

    package_uploader_getToken()
    {
        local curl_httpStatusCode
        local TMP_FILE
        local responseFile
        local curl_uploadFile
        core_temporaryFiles_newFileToRemoveOnExit
        responseFile=$TMP_FILE
        core_temporaryFiles_newFileToRemoveOnExit
        curl_uploadFile=$TMP_FILE

        jsonwriter_object string email "$package_uploader_email" string password "$package_uploader_password"  >"$curl_uploadFile"

        curl_http none '' POST "$package_uploader_server/api/users/sign_in"  "$responseFile" Content-Type application/json
        cat "$responseFile"
        echo "\n$curl_httpStatusCode"

        package_uploader_convertJsonFileToXml_callback()
        {
            case "$eventKind" in
                object)
                    case "$eventKey" in
                        user_id)
                            package_uploader_userId=$eventValue
                        ;;
                        auth_token)
                            package_uploader_authToken=$eventValue
                        ;;
                    esac
                ;;
            esac
        }

        jsonreader_parse "$responseFile" package_uploader_convertJsonFileToXml_callback
        core_variable_isUnsetOrEmpty "package_uploader_userId" && core_exitError $core_commandLine_exitCode_SOFTWARE "Failed to retrieve data from server"
        core_variable_isUnsetOrEmpty "package_uploader_authToken" && core_exitError $core_commandLine_exitCode_SOFTWARE "Failed to retrieve data from server"
        true
    }


    package_uploader_upload()
    {
        local packageFile=$1
        local curl_httpStatusCode
        local TMP_FILE
        local responseFile
        local curl_uploadFile=$packageFile
        local url
        local repository="${packageFile##*.}"

        core_temporaryFiles_newFileToRemoveOnExit
        responseFile=$TMP_FILE
        url="$package_uploader_server/api/users/$package_uploader_userId/repositories/$repository/$package_uploader_distribution/$package_uploader_component/packages"

        curl -X POST --header "x-auth-token:$package_uploader_authToken" -F file=@$packageFile $url
    }

}

_program_name='package_uploader'
_program_version='unversioned'
_program_package_or_build=''
_program_path="$([ "${_program_fattening_program_path+set}" = 'set' ] && printf '%s\n' "$_program_fattening_program_path" || ([ "${0%/*}" = "${0}" ] && printf '%s\n' '.' || printf '%s\n' "${0%/*}"))"
_program_libPath="${_program_path}/lib"
_program_etcPath="${_program_path}/etc"
_program_varPath="${_program_path}/var"
_program_entrypoint='package_uploader'


_program_commandLine_parseInitialise()
{
    core_variable_isSet RELEASEQUEUE_DEPLOY_SERVER && package_uploader_server=$RELEASEQUEUE_DEPLOY_SERVER
    core_variable_isSet RELEASEQUEUE_DEPLOY_DISTRIBUTION && package_uploader_distribution=$RELEASEQUEUE_DEPLOY_DISTRIBUTION
    core_variable_isSet RELEASEQUEUE_DEPLOY_EMAIL && package_uploader_email=$RELEASEQUEUE_DEPLOY_EMAIL
    core_variable_isSet RELEASEQUEUE_DEPLOY_PASSWORD && package_uploader_password=$RELEASEQUEUE_DEPLOY_PASSWORD
    core_variable_isSet RELEASEQUEUE_DEPLOY_COMPONENT && package_uploader_component=$RELEASEQUEUE_DEPLOY_COMPONENT
    core_variable_isSet RELEASEQUEUE_DEPLOY_PACKAGE && package_uploader_packageFile=$RELEASEQUEUE_DEPLOY_PACKAGE
    true
}

_program_commandLine_helpMessage()
{
    _program_commandLine_helpMessage_usage="[OPTION]... -- [PACKAGE FILE]..."
    _program_commandLine_helpMessage_description="Uploads package to ReleaseQueue"
    _program_commandLine_helpMessage_options="
    --server URL      Server URL."
    _program_commandLine_helpMessage_optionsSpacing='     '
    _program_commandLine_helpMessage_configurationKeys="
"
    _program_commandLine_helpMessage_examples="
    ${_program_name} --server http://127.0.0.1:4001 --distribution dist --component comp --email test_user@rq.com --password test_pass package_file.deb
    Or set the options as env variables before calling
    RELEASEQUEUE_DEPLOY_SERVER=http://127.0.0.1:4001 RELEASEQUEUE_DEPLOY_DISTRIBUTION=dist RELEASEQUEUE_DEPLOY_EMAIL=test_user@rq.com RELEASEQUEUE_DEPLOY_PASSWORD=test_pass RELEASEQUEUE_DEPLOY_COMPONENT=comp RELEASEQUEUE_DEPLOY_PACKAGE=package_file.deb ${_program_name}
"
}


_program_commandLine_optionExists()
{
  case "$optionName" in

    server)
        echo 'yes-argumented'
    ;;

    distribution)
        echo 'yes-argumented'
    ;;

    email)
        echo 'yes-argumented'
    ;;

    password)
        echo 'yes-argumented'
    ;;

    component)
        echo 'yes-argumented'
    ;;

    *)
        echo 'no'
    ;;

  esac
}


_program_commandLine_processOptionWithArgument()
{
    case "$optionName" in

        server)
            package_uploader_server="$optionValue"
        ;;

        distribution)
            package_uploader_distribution="$optionValue"
        ;;

        email)
            package_uploader_email="$optionValue"
        ;;

        password)
            package_uploader_password="$optionValue"
        ;;

        component)
            package_uploader_component="$optionValue"
        ;;

        *)
            echo 'no'
        ;;

    esac
}


_program_commandLine_handleNonOptions()
{
    if core_variable_matches $# 1; then
        package_uploader_packageFile=$1
    fi
    true
}


_program_commandLine_validate()
{
    core_variable_isUnsetOrEmpty "package_uploader_server" && core_exitError $core_commandLine_exitCode_USAGE "Server option is mandatory"

    core_variable_isUnsetOrEmpty "package_uploader_distribution" && core_exitError $core_commandLine_exitCode_USAGE "Distribution option is mandatory"

    core_variable_isUnsetOrEmpty "package_uploader_component" && core_exitError $core_commandLine_exitCode_USAGE "Component option is mandatory"

    core_variable_isUnsetOrEmpty "package_uploader_email" && core_exitError $core_commandLine_exitCode_USAGE "Email option is mandatory"

    core_variable_isUnsetOrEmpty "package_uploader_password" && core_exitError $core_commandLine_exitCode_USAGE "Password option is mandatory"

    core_validate_filePathReadable $core_commandLine_exitCode_USAGE 'option' 'package path' "$package_uploader_packageFile"

    true
}


# Assumes pwd, and so requires this code to be running from this folder
. "$_program_libPath"/shellfire/core/init.functions "$@"
